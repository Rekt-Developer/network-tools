#!/bin/bash

# Enhanced Network Tools v1.0
# By Rekt Developer Team

# Colors and styling
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m'
BOLD='\033[1m'

# Bangla Unicode characters
BANGLA_SCAN="‡¶∏‡ßç‡¶ï‡ßç‡¶Ø‡¶æ‡¶®"
BANGLA_MONITOR="‡¶Æ‡¶®‡¶ø‡¶ü‡¶∞"
BANGLA_ANALYZE="‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£"
BANGLA_UPDATE="‡¶Ü‡¶™‡¶°‡ßá‡¶ü"
BANGLA_EXIT="‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶•‡¶æ‡¶®"

# Advanced banner with spinning animation
show_banner() {
    clear
    # ASCII art frames for animation
    local -a frames=(
        "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïó ‚ïî‚ïê‚ïó ‚ïî‚ïê‚ïó ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïó"
        "‚ïë‚ïî‚ïó‚ïî‚ïó‚ïë ‚ïë‚ïë‚ïö‚ïó‚ïë‚ïë‚ïë ‚ïë‚ïî‚ïó‚ïî‚ïó‚ïë"
        "‚ïö‚ïù‚ïë‚ïë‚ïö‚ïù ‚ïë‚ïî‚ïó‚ïö‚ïù‚ïë‚ïë ‚ïö‚ïù‚ïë‚ïë‚ïö‚ïù"
        "  ‚ïë‚ïë   ‚ïë‚ïë‚ïö‚ïó‚ïë‚ïë‚ïë   ‚ïë‚ïë  "
        "  ‚ïë‚ïë   ‚ïë‚ïë ‚ïë‚ïë‚ïë‚ïë   ‚ïë‚ïë  "
        "  ‚ïö‚ïù   ‚ïö‚ïù ‚ïö‚ïê‚ïù‚ïö‚ïù   ‚ïö‚ïù  "
    )
    
    for frame in "${frames[@]}"; do
        echo -en "\r${CYAN}${frame}${NC}"
        sleep 0.1
    done
    echo -e "\n\n${GREEN}Network Tools v1.0 ‚Ä¢ ‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶ü‡ßÅ‡¶≤‡¶∏${NC}\n"
}

# Advanced progress bar with percentage
progress_bar() {
    local duration=$1
    local width=50
    local progress=0
    while [ $progress -le 100 ]; do
        local filled=$((progress*width/100))
        local empty=$((width-filled))
        printf "\r[${GREEN}"
        printf "‚ñà%.0s" $(seq 1 $filled)
        printf "${NC}"
        printf "‚ñë%.0s" $(seq 1 $empty)
        printf "] ${YELLOW}%d%%${NC}" $progress
        sleep $duration
        progress=$((progress+2))
    done
    echo
}

# Network scanning with advanced features
advanced_scan() {
    echo -e "${CYAN}üîç Advanced Network Scan ‚Ä¢ ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶∏‡ßç‡¶ï‡ßç‡¶Ø‡¶æ‡¶®${NC}"
    progress_bar 0.05
    
    # Interface detection
    echo -e "\n${GREEN}üì° Network Interfaces ‚Ä¢ ‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶´‡ßá‡¶∏${NC}"
    ip -c a | grep -E "inet|inet6"
    
    # Port scanning
    echo -e "\n${GREEN}üîå Open Ports ‚Ä¢ ‡¶ì‡¶™‡ßá‡¶® ‡¶™‡ßã‡¶∞‡ßç‡¶ü${NC}"
    nmap -F localhost
    
    # Network statistics
    echo -e "\n${GREEN}üìä Statistics ‚Ä¢ ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®${NC}"
    netstat -i
}

# Real-time monitoring
monitor_network() {
    echo -e "${CYAN}üìä Network Monitor ‚Ä¢ ‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶Æ‡¶®‡¶ø‡¶ü‡¶∞${NC}"
    local count=0
    while [ $count -lt 10 ]; do
        clear
        echo -e "${YELLOW}Real-time Statistics ‚Ä¢ ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶≤-‡¶ü‡¶æ‡¶á‡¶Æ ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®${NC}"
        ifconfig | grep "RX packets\|TX packets"
        sleep 1
        ((count++))
    done
}

# Security check function
security_check() {
    echo -e "${CYAN}üõ°Ô∏è Security Check ‚Ä¢ ‡¶∏‡ßÅ‡¶∞‡¶ï‡ßç‡¶∑‡¶æ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ${NC}"
    progress_bar 0.05
    
    # Firewall status
    echo -e "\n${GREEN}Firewall Status ‚Ä¢ ‡¶´‡¶æ‡¶Ø‡¶º‡¶æ‡¶∞‡¶ì‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏${NC}"
    if command -v ufw >/dev/null; then
        ufw status
    else
        echo "Firewall not installed"
    fi
    
    # Open ports check
    echo -e "\n${GREEN}Open Ports ‚Ä¢ ‡¶ñ‡ßã‡¶≤‡¶æ ‡¶™‡ßã‡¶∞‡ßç‡¶ü${NC}"
    ss -tuln
}

# Main menu with bilingual support
show_menu() {
    echo -e "\n${BOLD}Available Commands ‚Ä¢ ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°${NC}"
    echo -e "${CYAN}1.${NC} Scan ‚Ä¢ ${BANGLA_SCAN}"
    echo -e "${CYAN}2.${NC} Monitor ‚Ä¢ ${BANGLA_MONITOR}"
    echo -e "${CYAN}3.${NC} Analyze ‚Ä¢ ${BANGLA_ANALYZE}"
    echo -e "${CYAN}4.${NC} Update ‚Ä¢ ${BANGLA_UPDATE}"
    echo -e "${CYAN}5.${NC} Exit ‚Ä¢ ${BANGLA_EXIT}\n"
}

# Main execution loop
main() {
    show_banner
    
    while true; do
        show_menu
        read -p "Enter command ‚Ä¢ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®: " cmd
        
        case $cmd in
            "scan"|"1")
                advanced_scan
                ;;
            "monitor"|"2")
                monitor_network
                ;;
            "analyze"|"3")
                security_check
                ;;
            "update"|"4")
                echo -e "${YELLOW}Checking for updates...${NC}"
                git pull origin main
                ;;
            "exit"|"5")
                echo -e "${GREEN}Thank you ‚Ä¢ ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid command ‚Ä¢ ‡¶Ö‡¶¨‡ßà‡¶ß ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°${NC}"
                ;;
        esac
    done
}

# Error handling with self-repair
set -eE
trap 'error_handler $? $LINENO' ERR

error_handler() {
    echo -e "${RED}Error $1 occurred on line $2${NC}"
    echo -e "${YELLOW}Attempting to repair...${NC}"
    chmod +x "$0"
    check_dependencies
}

# Start the program
main
